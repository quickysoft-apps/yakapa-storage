{"version":3,"sources":["../src/app.js"],"names":["path","fs","server","agentClient","listen","emitter","on","console","info","now","tag","message","from","filename","join","__dirname","unlock","data","timestamp","Date","toJSON","source","existing","readFileSync","incoming","DataFrame","setIndex","dropSeries","log","asJSON","dataFrame","undefined","parseJSON","writeFileSync","error","warn"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;IAAYA,I;;AACZ;;IAAYC,E;;AACZ;;AACA;;;;;;;;AAEA,IAAMC,SAAS,qBAAW,IAAX,CAAf;AACA,IAAMC,cAAc,2BAApB;;AAEAD,OAAOE,MAAP;;AAEAD,YAAYE,OAAZ,CAAoBC,EAApB,CAAuB,WAAvB,EAAoC,YAAM;AACzCC,SAAQC,IAAR,CAAa,iBAAOC,GAAP,EAAb,EAA2B,8BAA3B,EAA2DN,YAAYO,GAAvE;AACA,CAFD;;AAIAP,YAAYE,OAAZ,CAAoBC,EAApB,CAAuB,QAAvB,EAAiC,UAACK,OAAD,EAAUC,IAAV,EAAmB;AACnDL,SAAQC,IAAR,CAAa,iBAAOC,GAAP,EAAb,EAA2B,gBAA3B,EAA6CE,OAA7C,EAAsD,MAAtD,EAA8DC,IAA9D;AACA,KAAMC,WAAWb,KAAKc,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,SAAjC,EAA+CH,IAA/C,WAAjB;AACA,mBAAKC,QAAL,EAAe,UAASG,MAAT,EAAiB;AAC/B,MAAI;AACH,OAAMC;AACLC,eAAW,IAAIC,IAAJ,GAAWC,MAAX,EADN;AAELC,YAAQT;AAFH,MAGFD,OAHE,CAAN;AAKA,OAAMW,WAAW,IAAI,oBAAUC,YAAd,CAA2BV,QAA3B,CAAjB;AACA,OAAMW,WAAW,IAAI,oBAAUC,SAAd,CAAwBR,IAAxB,EAA8BS,QAA9B,CAAuC,WAAvC,EAAoDC,UAApD,CAA+D,WAA/D,CAAjB;AACApB,WAAQqB,GAAR,CAAY,UAAZ,EAAwBJ,SAASK,MAAT,EAAxB;AACA,OAAIC,YAAYC,SAAhB;AACA,OAAIT,QAAJ,EAAc;AACbf,YAAQqB,GAAR,CAAY,UAAZ,EAAwBN,SAASU,SAAT,EAAxB;AACA;AACD;AACAR,YAASK,MAAT,GAAkBI,aAAlB,CAAgCpB,QAAhC;AACAN,WAAQC,IAAR,CAAa,iBAAOC,GAAP,EAAb,EAA2B,kBAA3B,EAA+CI,QAA/C;AACA,GAhBD,CAiBA,OAAMqB,KAAN,EAAa;AACZ3B,WAAQ4B,IAAR,CAAa,iBAAO1B,GAAP,EAAb,EAA2B,oBAA3B,EAAiDI,QAAjD,EAA2DqB,KAA3D;AACA,GAnBD,SAoBQ;AACPlB;AACA;AACD,EAxBD;AAyBA,CA5BD","file":"app.js","sourcesContent":["import Server from './server'\nimport AgentClient from './agentClient'\nimport Common from './common'\n\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport { lock } from 'ki1r0y.lock'\nimport dataForge from 'data-forge'\n\nconst server = new Server(true)\nconst agentClient = new AgentClient()\n\nserver.listen()\n\nagentClient.emitter.on('connected', () => {\n\tconsole.info(Common.now(), 'Storage connectÃ© avec le tag', agentClient.tag)\n})\n\nagentClient.emitter.on('result', (message, from) => {\n\tconsole.info(Common.now(), 'Storing result', message, 'from', from)\n\tconst filename = path.join(__dirname, '..', '..', 'storage', `${from}.json`)\n\tlock(filename, function(unlock) {\t\t\n\t\ttry {\n\t\t\tconst data = {\t\t\t\t\n\t\t\t\ttimestamp: new Date().toJSON(),\n\t\t\t\tsource: from,\n\t\t\t\t...message\n\t\t\t}\n\t\t\tconst existing = new dataForge.readFileSync(filename)\n\t\t\tconst incoming = new dataForge.DataFrame(data).setIndex(\"timestamp\").dropSeries(\"timestamp\")\n\t\t\tconsole.log('incoming', incoming.asJSON())\n\t\t\tlet dataFrame = undefined\n\t\t\tif (existing)\t{\n\t\t\t\tconsole.log('existing', existing.parseJSON())\n\t\t\t}\t\t\t\t\n\t\t\t//dataFrame = existing ? existing.concat(incoming) : incoming\t\t\t\n\t\t\tincoming.asJSON().writeFileSync(filename);\n\t\t\tconsole.info(Common.now(), 'Storage done for', filename)\n\t\t} \n\t\tcatch(error) {\t\t\t\n\t\t\tconsole.warn(Common.now(), 'Storage failed for', filename, error)\n\t\t}\n\t\tfinally {\n\t\t\tunlock()\n\t\t}\n\t});\n})"]}