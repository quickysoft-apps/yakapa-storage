{"version":3,"sources":["../src/app.js"],"names":["path","fs","server","agentClient","listen","emitter","on","console","info","now","tag","message","from","date","jsonMessage","JSON","parse","rootPath","join","__dirname","existsSync","mkdirSync","filename","extractor","unlock","result","newData","timestamp","slice","incomingDataFrame","DataFrame","count","days","last","Date","getTime","existingData","readFileSync","parseJSON","parseDates","setIndex","orderBy","row","startAt","tail","toArray","existingDataFrame","storingDataFrame","concat","asJSON","writeFileSync","error","warn"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEA;;IAAYA,I;;AACZ;;IAAYC,E;;AACZ;;AACA;;;;;;;;AAEA,IAAMC,SAAS,qBAAW,IAAX,CAAf;AACA,IAAMC,cAAc,2BAApB;;AAEAD,OAAOE,MAAP;;AAEAD,YAAYE,OAAZ,CAAoBC,EAApB,CAAuB,WAAvB,EAAoC,YAAM;AACzCC,SAAQC,IAAR,CAAa,iBAAOC,GAAP,EAAb,EAA2B,8BAA3B,EAA2DN,YAAYO,GAAvE;AACA,CAFD;;AAIAP,YAAYE,OAAZ,CAAoBC,EAApB,CAAuB,QAAvB,EAAiC,UAACK,OAAD,EAAUC,IAAV,EAAgBC,IAAhB,EAAyB;AACzDN,SAAQC,IAAR,CAAa,iBAAOC,GAAP,EAAb,EAA2B,gBAA3B,EAA6CE,OAA7C,EAAsD,MAAtD,EAA8DC,IAA9D;AACA,KAAME,cAAcC,KAAKC,KAAL,CAAWL,OAAX,CAApB;AACA,KAAMM,WAAWjB,KAAKkB,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,SAAjC,EAA4CP,IAA5C,CAAjB;AACA,KAAI,CAACX,GAAGmB,UAAH,CAAcH,QAAd,CAAL,EAA8B;AAC7BhB,KAAGoB,SAAH,CAAaJ,QAAb;AACA;AACD,KAAMK,WAAWtB,KAAKkB,IAAL,CAAUD,QAAV,EAAuBH,YAAYS,SAAnC,WAAjB;AACA,mBAAKD,QAAL,EAAe,UAASE,MAAT,EAAiB;AAC/B,MAAI;AAAA,OACKD,SADL,GAC2BT,WAD3B,CACKS,SADL;AAAA,OACgBE,MADhB,GAC2BX,WAD3B,CACgBW,MADhB;;AAEH,OAAMC,UAAU,CACf;AACCC,eAAWd,KAAKe,KAAL,CAAW,CAAX,EAAa,EAAb,IAAiB,OAD7B;AAECH;AAFD,IADe,CAAhB;AAMA,OAAMI,oBAAoB,IAAI,oBAAUC,SAAd,CAAwBJ,OAAxB,CAA1B;;AAEA,OAAIzB,GAAGmB,UAAH,CAAcE,QAAd,CAAJ,EAA6B;AAC5B,QAAMS,QAAQ,KAAd;AACA,QAAMC,OAAO,CAAb;AACA,QAAMC,OAAO,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAwBH,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,IAAvD,CAAb;AACA,QAAMI,eAAe,IAAI,oBAAUC,YAAd,CAA2Bf,QAA3B,EACnBgB,SADmB,GAEnBC,UAFmB,CAER,WAFQ,EAGnBC,QAHmB,CAGV,WAHU,EAInBC,OAJmB,CAIX;AAAA,YAAOC,IAAIf,SAAX;AAAA,KAJW,EAKnBgB,OALmB,CAKXV,IALW,EAMnBW,IANmB,CAMdb,QAAQ,CANM,EAOnBc,OAPmB,EAArB;AAQA,QAAMC,oBAAoB,IAAI,oBAAUhB,SAAd,CAAwBM,YAAxB,CAA1B;AACA,QAAMW,mBAAmBD,kBAAkBE,MAAlB,CAAyBnB,iBAAzB,CAAzB;AACAkB,qBAAiBE,MAAjB,GAA0BC,aAA1B,CAAwC5B,QAAxC;AACA,IAfD,MAeO;AACNO,sBAAkBoB,MAAlB,GAA2BC,aAA3B,CAAyC5B,QAAzC;AACA;;AAEDf,WAAQC,IAAR,CAAa,iBAAOC,GAAP,EAAb,EAA2B,yBAA3B,EAAsDG,IAAtD;AACA,GA9BD,CA+BA,OAAMuC,KAAN,EAAa;AACZ5C,WAAQ6C,IAAR,CAAa,iBAAO3C,GAAP,EAAb,EAA2B,2BAA3B,EAAwDG,IAAxD,EAA8DuC,KAA9D;AACA,GAjCD,SAkCQ;AACP3B;AACA;AACD,EAtCD;AAuCA,CA/CD","file":"app.js","sourcesContent":["import Server from './server'\nimport AgentClient from './agentClient'\nimport Common from './common'\n\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport { lock } from 'ki1r0y.lock'\nimport dataForge from 'data-forge'\n\nconst server = new Server(true)\nconst agentClient = new AgentClient()\n\nserver.listen()\n\nagentClient.emitter.on('connected', () => {\n\tconsole.info(Common.now(), 'Storage connectÃ© avec le tag', agentClient.tag)\n})\n\nagentClient.emitter.on('result', (message, from, date) => {\n\tconsole.info(Common.now(), 'Storing result', message, 'from', from)\n\tconst jsonMessage = JSON.parse(message)\n\tconst rootPath = path.join(__dirname, '..', '..', 'storage', from);\n\tif (!fs.existsSync(rootPath)) {\n\t\tfs.mkdirSync(rootPath)\n\t}\n\tconst filename = path.join(rootPath, `${jsonMessage.extractor}.json`)\n\tlock(filename, function(unlock) {\t\t\n\t\ttry {\n\t\t\tconst { extractor, result } = jsonMessage\t\t\t\n\t\t\tconst newData = [\n\t\t\t\t{\t\t\t\t\n\t\t\t\t\ttimestamp: date.slice(0,19)+'.000Z',\n\t\t\t\t\tresult\n\t\t\t\t}\n\t\t\t]\n\t\t\tconst incomingDataFrame = new dataForge.DataFrame(newData)\n\t\t\t\t\t\t\n\t\t\tif (fs.existsSync(filename)) {\n\t\t\t\tconst count = 10000\n\t\t\t\tconst days = 3\t\t\t\t\n\t\t\t\tconst last = new Date(new Date().getTime() - (days * 24 * 60 * 60 * 1000));\t\t\t\t\n\t\t\t\tconst existingData = new dataForge.readFileSync(filename)\n\t\t\t\t\t.parseJSON()\n\t\t\t\t\t.parseDates(\"timestamp\")\n\t\t\t\t\t.setIndex(\"timestamp\")\n\t\t\t\t\t.orderBy(row => row.timestamp)\n\t\t\t\t\t.startAt(last)\n\t\t\t\t\t.tail(count - 1)\n\t\t\t\t\t.toArray()\n\t\t\t\tconst existingDataFrame = new dataForge.DataFrame(existingData)\n\t\t\t\tconst storingDataFrame = existingDataFrame.concat(incomingDataFrame)\n\t\t\t\tstoringDataFrame.asJSON().writeFileSync(filename);\n\t\t\t} else {\n\t\t\t\tincomingDataFrame.asJSON().writeFileSync(filename);\n\t\t\t}\n\t\t\t\n\t\t\tconsole.info(Common.now(), 'Result storage done for', from)\n\t\t} \n\t\tcatch(error) {\t\t\t\n\t\t\tconsole.warn(Common.now(), 'Result storage failed for', from, error)\n\t\t}\n\t\tfinally {\n\t\t\tunlock()\n\t\t}\n\t});\n})"]}