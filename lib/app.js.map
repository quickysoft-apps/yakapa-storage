{"version":3,"sources":["../src/app.js"],"names":["path","fs","server","agentClient","listen","emitter","on","console","info","now","tag","message","from","filename","join","__dirname","unlock","result","JSON","parse","newData","timestamp","Date","toJSON","incomingDataFrame","DataFrame","existsSync","existingData","readFileSync","parseJSON","toArray","existingDataFrame","storingDataFrame","concat","asJSON","writeFileSync","error","warn"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;IAAYA,I;;AACZ;;IAAYC,E;;AACZ;;AACA;;;;;;;;AAEA,IAAMC,SAAS,qBAAW,IAAX,CAAf;AACA,IAAMC,cAAc,2BAApB;;AAEAD,OAAOE,MAAP;;AAEAD,YAAYE,OAAZ,CAAoBC,EAApB,CAAuB,WAAvB,EAAoC,YAAM;AACzCC,SAAQC,IAAR,CAAa,iBAAOC,GAAP,EAAb,EAA2B,8BAA3B,EAA2DN,YAAYO,GAAvE;AACA,CAFD;;AAIAP,YAAYE,OAAZ,CAAoBC,EAApB,CAAuB,QAAvB,EAAiC,UAACK,OAAD,EAAUC,IAAV,EAAmB;AACnDL,SAAQC,IAAR,CAAa,iBAAOC,GAAP,EAAb,EAA2B,gBAA3B,EAA6CE,OAA7C,EAAsD,MAAtD,EAA8DC,IAA9D;AACA,KAAMC,WAAWb,KAAKc,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,SAAjC,EAA+CH,IAA/C,WAAjB;AACA,mBAAKC,QAAL,EAAe,UAASG,MAAT,EAAiB;AAC/B,MAAI;;AAEH,OAAMC,SAASC,KAAKC,KAAL,CAAWR,OAAX,CAAf;AACA,OAAMS,UAAU;AAEdC,eAAW,IAAIC,IAAJ,GAAWC,MAAX;AAFG,MAGXN,MAHW,EAAhB;AAMA,OAAMO,oBAAoB,IAAI,oBAAUC,SAAd,CAAwBL,OAAxB,CAA1B;;AAEA,OAAInB,GAAGyB,UAAH,CAAcb,QAAd,CAAJ,EAA6B;AAC5B,QAAMc,eAAe,IAAI,oBAAUC,YAAd,CAA2Bf,QAA3B,EAAqCgB,SAArC,GAAiDC,OAAjD,EAArB;AACA,QAAMC,oBAAoB,IAAI,oBAAUN,SAAd,CAAwBE,YAAxB,CAA1B;AACA,QAAMK,mBAAmBD,kBAAkBE,MAAlB,CAAyBT,iBAAzB,CAAzB;AACAQ,qBAAiBE,MAAjB,GAA0BC,aAA1B,CAAwCtB,QAAxC;AACA,IALD,MAKO;AACNW,sBAAkBU,MAAlB,GAA2BC,aAA3B,CAAyCtB,QAAzC;AACA;;AAEDN,WAAQC,IAAR,CAAa,iBAAOC,GAAP,EAAb,EAA2B,yBAA3B,EAAsDG,IAAtD;AACA,GArBD,CAsBA,OAAMwB,KAAN,EAAa;AACZ7B,WAAQ8B,IAAR,CAAa,iBAAO5B,GAAP,EAAb,EAA2B,2BAA3B,EAAwDG,IAAxD,EAA8DwB,KAA9D;AACA,GAxBD,SAyBQ;AACPpB;AACA;AACD,EA7BD;AA8BA,CAjCD","file":"app.js","sourcesContent":["import Server from './server'\nimport AgentClient from './agentClient'\nimport Common from './common'\n\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport { lock } from 'ki1r0y.lock'\nimport dataForge from 'data-forge'\n\nconst server = new Server(true)\nconst agentClient = new AgentClient()\n\nserver.listen()\n\nagentClient.emitter.on('connected', () => {\n\tconsole.info(Common.now(), 'Storage connectÃ© avec le tag', agentClient.tag)\n})\n\nagentClient.emitter.on('result', (message, from) => {\n\tconsole.info(Common.now(), 'Storing result', message, 'from', from)\n\tconst filename = path.join(__dirname, '..', '..', 'storage', `${from}.json`)\n\tlock(filename, function(unlock) {\t\t\n\t\ttry {\n\t\t\t\n\t\t\tconst result = JSON.parse(message)\n\t\t\tconst newData = [\n\t\t\t\t{\t\t\t\t\n\t\t\t\t\ttimestamp: new Date().toJSON(),\n\t\t\t\t\t...result\n\t\t\t\t}\n\t\t\t]\n\t\t\tconst incomingDataFrame = new dataForge.DataFrame(newData)\t\t\t\n\t\t\t\t\t\t\n\t\t\tif (fs.existsSync(filename)) {\n\t\t\t\tconst existingData = new dataForge.readFileSync(filename).parseJSON().toArray()\n\t\t\t\tconst existingDataFrame = new dataForge.DataFrame(existingData)\n\t\t\t\tconst storingDataFrame = existingDataFrame.concat(incomingDataFrame)\n\t\t\t\tstoringDataFrame.asJSON().writeFileSync(filename);\n\t\t\t} else {\n\t\t\t\tincomingDataFrame.asJSON().writeFileSync(filename);\n\t\t\t}\n\t\t\t\n\t\t\tconsole.info(Common.now(), 'Result storage done for', from)\n\t\t} \n\t\tcatch(error) {\t\t\t\n\t\t\tconsole.warn(Common.now(), 'Result storage failed for', from, error)\n\t\t}\n\t\tfinally {\n\t\t\tunlock()\n\t\t}\n\t});\n})"]}