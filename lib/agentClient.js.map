{"version":3,"sources":["../src/agentClient.js"],"names":["LZString","SOCKET_SERVER_URL","DEFAULT_NICKNAME","EVENT_PREFIX","AGENT_TAG","RESULT","AUTHENTICATED","AgentClientEmitter","emit","AgentClient","_emitter","_isAuthenticated","_tag","_socket","rejectUnauthorized","query","on","ms","connected","error","connectionError","socketError","socketMessage","authenticated","store","json","JSON","parse","console","warn","now","from","info","event","payload","to","compressed","compressToUTF16","nickname","message","doConnected","_nickname","Promise","resolve","reject","check","decompressed","decompressFromUTF16"],"mappings":"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","file":"agentClient.js","sourcesContent":["import 'babel-polyfill'\nimport io from 'socket.io-client'\nimport * as LZString from 'lz-string'\nimport {\n  EventEmitter\n} from 'events'\n\nimport Common from './common'\n\nconst SOCKET_SERVER_URL = 'https://mprj.cloudapp.net'\nconst DEFAULT_NICKNAME = 'Storage'\n\nconst EVENT_PREFIX = 'yakapa'\nconst AGENT_TAG = 'f1a33ec7-b0a5-4b65-be40-d2a93fd5b133'\nconst RESULT = `${EVENT_PREFIX}/result`\nconst AUTHENTICATED = `${EVENT_PREFIX}/authenticated`\n\nclass AgentClientEmitter extends EventEmitter {\n  doConnected() {\n    this.emit('connected')\n  }\n}\n\nexport default class AgentClient {\n\n  constructor() {\n\n    this._emitter = new AgentClientEmitter()\n    this._isAuthenticated = false\n    this._tag = AGENT_TAG\n\n    this._socket = io(SOCKET_SERVER_URL, {\n      rejectUnauthorized: false,\n      query: `tag=${this._tag}`\n    })\n\n    this._socket.on('pong', (ms) => {\n      this._emitter.emit('pong', ms)\n    })\n\n    this._socket.on('connect', () => {\n      this.connected()\n    })\n\n    this._socket.on('connect_error', (error) => {\n      this.connectionError(error)\n    })\n\n    this._socket.on('error', (error) => {\n      this.socketError(error)\n    })\n\n    this._socket.on(AUTHENTICATED, (socketMessage) => {\n      this.authenticated(socketMessage)\n    })\n\n    this._socket.on(RESULT, async (socketMessage) => {\n      await this.store(socketMessage)\n    })\n  }\n\n  get tag() {\n    return this._tag\n  }\n\n  get emitter() {\n    return this._emitter\n  }\n\n  getJson(json) {\n    return typeof json === 'object' ? json : JSON.parse(json)\n  }\n\n  check(socketMessage) {\n\n    if (this._isAuthenticated === false) {\n      console.warn(`${Common.now()} Pas authentifié`)\n      return false\n    }\n\n    if (socketMessage == null) {\n      console.warn(`${Common.now()} Pas de message à traiter`)\n      return false\n    }\n\n    if (socketMessage.from == null) {\n      console.warn(`${Common.now()} Expéditeur non défini'`)\n      return false\n    }\n\n    console.info(socketMessage)\n    return true\n  }\n\n  emit(event = RESULT, payload, to) {\n    const compressed = payload != null ? LZString.compressToUTF16(payload) : null\n    const socketMessage = {\n      from: this._tag,\n      nickname: `${DEFAULT_NICKNAME} ${this._tag}`,\n      to: to,\n      message: compressed\n    }\n\n    this._socket.emit(event, socketMessage)\n  }\n\n  connected() {\n    console.info(Common.now(), 'Connecté à', SOCKET_SERVER_URL)\n    this._emitter.doConnected()\n  }\n\n  socketError(error) {\n    console.info(Common.now(), 'Socket error', error)\n    this._emitter.emit('socketError', error)\n  }\n\n  connectionError(error) {\n    console.info(Common.now(), 'Erreur connexion', error)\n    this._emitter.emit('connectionError', error)\n  }\n\n  authenticated(socketMessage) {\n    console.info(Common.now(), 'Bienvenue', socketMessage.nickname)\n    this._isAuthenticated = true\n    this._nickname = socketMessage.nickname\n    this._emitter.emit('authenticated', socketMessage)\n  }\n  \n  async store(socketMessage) {\n    return new Promise((resolve, reject) => {\n      if (!this.check(socketMessage)) reject()\n      const decompressed = LZString.decompressFromUTF16(socketMessage.message)\n      console.info(`Message ${decompressed}`)\n      //const emitter = socketMessage.From;\n      //this.emit(SocketEvent.CHAT_MESSAGE, Faker.lorem.sentence(15), emitter);\n      this._emitter.emit('store', socketMessage)\n      resolve()\n    })\n  }\n\n}"]}