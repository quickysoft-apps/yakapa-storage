{"version":3,"sources":["../src/agentClient.js"],"names":["LZString","SOCKET_SERVER_URL","DEFAULT_NICKNAME","AGENT_TAG","EVENT_PREFIX","RESULT","AgentClientEmitter","emit","error","ms","message","from","date","AgentClient","_emitter","_isAuthenticated","_tag","_socket","rejectUnauthorized","query","on","pong","connected","connectionError","socketError","socketMessage","result","json","JSON","parse","console","warn","now","info","event","payload","to","compressed","compressToUTF16","nickname","check","decompressed","decompressFromUTF16"],"mappings":"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","file":"agentClient.js","sourcesContent":["import 'babel-polyfill'\nimport io from 'socket.io-client'\nimport * as LZString from 'lz-string'\nimport { EventEmitter } from 'events'\n\nimport Common from './common'\n\nconst SOCKET_SERVER_URL = 'https://mprj.cloudapp.net'\nconst DEFAULT_NICKNAME = 'Storage'\n\nconst AGENT_TAG = 'f1a33ec7-b0a5-4b65-be40-d2a93fd5b133'\nconst EVENT_PREFIX = 'yakapa'\nconst RESULT = `${EVENT_PREFIX}/result`\n\nclass AgentClientEmitter extends EventEmitter {\n  \n  connected() {\n    this.emit('connected')\n  }\n  \n  socketError(error) {\n    this.emit('socketError', error)\n  }\n  \n  connectionError(error) {\n    this.emit('connectionError', error)\n  }\n  \n  pong(ms) {\n    this.emit('pong', ms)\n  }\n  \n  result(message, from, date) {\n    this.emit('result', message, from, date)\n  }\n}\n\nexport default class AgentClient {\n\n  constructor() {\n\n    this._emitter = new AgentClientEmitter()\n    this._isAuthenticated = false\n    this._tag = AGENT_TAG\n\n    this._socket = io(SOCKET_SERVER_URL, {\n      rejectUnauthorized: false,\n      query: `tag=${this._tag}`\n    })\n\n    this._socket.on('pong', (ms) => {\n      this._emitter.pong(ms)\n    })\n\n    this._socket.on('connect', () => {\n      this.connected()\n    })\n\n    this._socket.on('connect_error', (error) => {\n      this.connectionError(error)\n    })\n\n    this._socket.on('error', (error) => {\n      this.socketError(error)\n    })\n\n    this._socket.on(RESULT, (socketMessage) => {      \n      this.result(socketMessage)\n    })\n  }\n\n  get tag() {\n    return this._tag\n  }\n\n  get emitter() {\n    return this._emitter\n  }\n\n  getJson(json) {\n    return typeof json === 'object' ? json : JSON.parse(json)\n  }\n\n  check(socketMessage) {\n\n    if (this._isAuthenticated === false) {\n      console.warn(`${Common.now()} Pas authentifié`)\n      return false\n    }\n\n    if (socketMessage == null) {\n      console.warn(`${Common.now()} Pas de message à traiter`)\n      return false\n    }\n\n    if (socketMessage.from == null) {\n      console.warn(`${Common.now()} Expéditeur non défini'`)\n      return false\n    }\n\n    console.info(socketMessage)\n    return true\n  }\n\n  emit(event = RESULT, payload, to) {\n    const compressed = payload != null ? LZString.compressToUTF16(payload) : null\n    const socketMessage = {\n      from: this._tag,\n      nickname: `${DEFAULT_NICKNAME} ${this._tag}`,\n      to: to,\n      message: compressed\n    }\n\n    this._socket.emit(event, socketMessage)\n  }\n\n  connected() {\n    console.info(Common.now(), 'Connecté à', SOCKET_SERVER_URL)\n    this._isAuthenticated = true\n    this._emitter.connected()\n  }\n\n  socketError(error) {\n    console.error(Common.now(), 'Socket error', error)\n    this._emitter.socketError(error)\n  }\n \n  connectionError(error) {\n    console.info(Common.now(), 'Erreur connexion', error)\n    this._emitter.connectionError(error)\n  }\n  \n  result(socketMessage) {        \n    if (!this.check(socketMessage)) {\n      return\n    }\n    const decompressed = LZString.decompressFromUTF16(socketMessage.message)\n    console.info(`Message ${decompressed}`)      \n    this._emitter.result(decompressed, socketMessage.from, socketMessage.date)      \n  }\n\n}"]}